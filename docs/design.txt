
Todo
	Add approved user, etc to thief table
Database
	create table thief (
		thief_id     int,
		approved     bool
	);
	create table name (
		thief_id     int,
		name         text
	);
	create table email (
		thief_id     int,
		email        text
	);
	create table url (
		thief_id     int,
		url          text
	);
	create table addr (
		thief_id     int,
		line1        text,
		line2        text,
		city         text,
		state        text,
		zip          text
	);
	create table phone (
		thief_id     int,
		phone        text
	);
	create table bike_serial (
		thief_id     int,
		bike_serial  text
	);
	create table phrase (
		thief_id     int,
		phrase       text
	);
	create table note (
		thief_id     int,
		note         text
	);
	create table file (
		thief_id     int,
		file         text  -- (url to file server)
	);
	create table bi_user (
		bi_user_id   int,
		email        text,
		password     text,  -- hash                                    -- remove
		first_name   text,
		last_name    text,
		title        text,
		org          text,                                             -- add
		phone        text,  -- only digits
		role         text,  -- ["admin", "readWrite", "readOnly"]
		approved     bool,
		banned       bool  -- acts as if biuser does not exist
	);
	create table history (
		-- Actions from post/get requests, store it as a json object
		history_id   int,
		datetime     timestamp,
		bi_user_id    int,
		source       text,
		message      text
	);
	create sequence next_thief_id;

	[table]_del tables
		-- '[table]_del' for all of the above
Test data
	insert into name  values (1, 'Martin Escarcega');
	insert into url   values (1, 'https://www.facebook.com/commerce/listing/883873439447420/?media_id=0&ref=share_attachment');
	insert into url   values (1, 'https://www.facebook.com/photo/?fbid=8454358474638526&set=gm.1992600470910333&idorvanity=301221206714943');
	insert into url   values (1, 'https://www.facebook.com/groups/301221206714943/search/?q=escarcega');
	insert into name  values (2, 'Ventas Lopez');
	insert into url   values (2, 'https://www.facebook.com/groups/JUAREZBICICLETAS/posts/2070072256496487/');
	insert into url   values (2, 'https://www.facebook.com/groups/JUAREZBICICLETAS/posts/2073626302807749/');
	insert into url   values (2, 'https://www.facebook.com/groups/JUAREZBICICLETAS/posts/2073628852807494/');
	insert into phone values (2, '+52 656 441 818');
	insert into name  values (3, 'Ricky Estrada Zamora');
	insert into email values (3, 'ricarqui84@hotmail.com');
	insert into name  values (4, 'Billy');
	insert into url   values (4, 'https://offerup.com/p/89256643/');
	insert into name  values (5, 'Tormentor');
	insert into url   values (5, 'https://offerup.com/p/59257395/');
	insert into name  values (6, 'Raymond');
	insert into url   values (6, 'https://offerup.com/p/86715079/');
	insert into name  values (7, 'Masii');
	insert into url   values (7, 'https://offerup.com/item/detail/1583160894');
	insert into url   values (7, 'https://offerup.com/item/detail/1583161312');
	insert into url   values (7, 'https://offerup.com/item/detail/1583161761');
	insert into addr  values (7, '728 South Tyler', null, 'Tacoma', 'WA', '98405');
	insert into name  values (8, 'Servando Prieto');
	insert into url   values (8, 'https://www.facebook.com/commerce/listing/191844393288121/?media_id=0&ref=share_attachment');
	insert into url   values (8, 'https://www.facebook.com/commerce/listing/732060310781656/?media_id=0&ref=share_attachment');
	insert into addr  values (8, '7535 Hermosillo Drive', null, 'El Paso', 'TX', '79915');
Requests
	We designed some requests/communications between the frontend and the backend and would like to get your thoughts
	We can also explain these more on a call or on Tuesday

	# Search (thief list page)
	// GET
	/search?search_type= ....
	request:
		{
			'search_type': 'name',
			'search': 'search content',
		}
	response:
		[
			{
				'thiefId': 2
				'name': ['name1', 'name2', 'name3'], // all names for the thief
				'phone': ['phone1'],
				'email': ['email1']
			},
			{
				'thiefId': 3
				'name': ['name_that_matched', 'namea', 'namec'],
					// the name that matched the search is put first
					// we were thinking we could have the names be separated by commas
					//   and then truncated to only show a few (if there are many of them)
					// ex:   name1, name2, ...
					// if they want to see all, they can click the row and go to the thief edit page
				'phone': ['phonea'],
				'email': ['emaila'],
				'bikeSerial': ['....'],
				'addr': [{
					'line1': 'value',
					'line2': 'value',
					'city':  'value',
					'state': 'value',
					'zip':   'value'
				}]
			},
		]

	# Load the thief page
	// GET
	/thiefEdit?thief_id=3
	request:
		{
			'thief_id': 3
		}
	response:
		{
			'name': ['name1', 'name2'], # all names for the thief
			'email': ['email1']
			// everything else about the thief
		}

	# Submit changes
	(to keep track in the frontend):
		// in order to send a cleaner response, we were thinking the frontend could figure out which
		//   fields were edited and which were not. A temp id could be used to know which input field corresponds
		//   to which, so that after they are changed, we know which were changed and which were deleted
		old_state = {
			'name': [
				0: 'name1',
				1: 'name2',
				2: 'name3',
			],
		}
		new_state = {
			'name': [
				0: 'name1',
				1: null,
				2: 'name3a',
				3: 'name3b',
			]
		}
	// Inserts (POST)
	// /thiefEdit
		// the edit request would then contain only the edits that were made
		{
			'thief_id': 3
			'name': [ 'name3b' ], // insert
			'email': ['email1']
		}
	// Deletes (DELETE)
	// /thiefEdit
		{
			'thief_id': 3
			'name': [ 'name2', ], // delete
		}
	// Updates (PUT)
	// /thiefEdit
		{
			'thief_id': 3
			'name': [
				// old val, new val
				['name3', 'name3a'], // update
				[      0, 'name3a'], // insert
				['name3',       0 ], // delete
			],
		}

	response:
		'success/fail'

	# Stats
	// GET
	// /stats
	request:
		'stats'
	response:
	{
		'users': 30,
		'urls': xxx,       // select count(*) from url;
		'phones': xxx,     // select count(*) from phone;
		'emails': xxx,     // select count(*) from email;
		'addresses': xxx,
		'names': xxx,
	}
Old
	Frontend
		Pages
			Home/Login
				Title
				UsernameField
				PasswordField
				Button           // Login
			Sign up
				Title
				EmailField       // Email
				PasswordField    // Password
				PasswordField    // Verify password
				TextField        // First name
				TextField        // Last name
				TextField        // Title
				PhoneField       // Phone
				Button           // Submit
				// Successful submition page? or back to login?
			About
				Title
				InfoField        // About website (editable by admin)
				StatsField
				Button           // Back
			ThiefList
				// Title (?)
				SearchField      // Search
				Button           // New Thief Entry
				Button           // Users (admin only)
				Button           // Logout
				Table            //   (order by recent if search is blank)
			ThiefEdit
				TextField        // Name
				EmailField       // Email
				UrlField         // Url
				FullAddrField    // Addrs
				PhoneField       // Phone
				BikeSerialField  // BikeSerial
				NotesField       // Phrase
				NotesField       // Notes
				// ?             // Files
				Button           // Submit
				VerifyButton     // Cancel
				VerifyButton     // Delete
			UserList
				// Title (?)
				SearchField      // Search
				Button           // New Thief Entry
				Button           // Users (admin only)
				Button           // Logout
				Table            //   (order by not banned, recent if search is blank)
			UserEdit
				EmailField       // Email
				PasswordField    // Password
				TextField        // FirstName
				TextField        // LastName
				TextField        // Title
				PhoneField       // Phone
				DropdownField    // Role     ["Read Only", "Read Write", "Admin"]
				DropdownField    // Approved ["No", "Yes"]
				DropdownField    // Banned   ["No", "Yes"]
				Button           // Submit
				Button           // Cancel
		InputFields
			// allowMultiple: includes a '+' button to add multiple fields
			// should the inputs all be row elements of a table so they line up with each other?
			MenuBar (?)
			Modal           (text: string)
			Title           (text: string)
			Table           (children: ReactNode, collapsibleColumns: bool = true)
				HeaderRow    (children: ReactNode, collapsibleColumns: bool = true)
				Row          (children: ReactNode) // Clickable
			Button          (text: string)
			VerifyButton    (text: string) // creates Modal to verify (delete/cancel)
			DropdownField   (options: string[], selected: string = null)
			SearchField     (width: float)
			TextField       (width: float,                allowMultiple: bool = true)
			NotesField      (width: float, height: float, allowMultiple: bool = true) // resizeable, multi-line
			PhoneField      (allowMultiple: bool = true)
			EmailField      (allowMultiple: bool = true)
			UrlField        (allowMultiple: bool = true)
			BikeSerialField (allowMultiple: bool = true)
			FullAddrField   (allowMultiple: bool = true) // includes: addr TextField, city TextField, state DropdownField, zip ZipField
			ZipField        ()
			UsernameField   () // use just EmailField instead?
			PasswordField   ()
			InfoField       (editableByAdmin: bool = true)
			StatsField      ()
	API
		ThiefIdsFromSearch(
				search: string,
				fieldName: string = null,
				matchType: string = "exact"
				) -> int[]
			// matchType
				// ['exact', 'within', 'similar']
				// within: one field is inside the other
				// similar: uses 'fuzzy' similarity (Levenshtein distance)
			// I would prefer not having all these (unless/until they're needed)
				ThiefIdsFromName      (name:       string) -> int[]
				ThiefIdsFromEmail     (email:      string) -> int[]
				ThiefIdsFromUrl       (url:        string) -> int[]
				ThiefIdsFromAddr      (addr:       string) -> int[]
				ThiefIdsFromCity      (city:       string) -> int[]
				ThiefIdsFromState     (state:      string) -> int[]
				ThiefIdsFromZip       (zip:        string) -> int[]
				ThiefIdsFromPhone     (phone:      string) -> int[]
				ThiefIdsFromBikeSerial(bikeSerial: string) -> int[]
				ThiefIdsFromPhrase    (phrase:     string) -> int[]
		ThiefInfoFromId(id: int) -> dict
			// dict contains most info about thief
		LogEvent(source: string, message: string)

